<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blogs on Erik McClure</title><link>https://erikmcclure.com/blog/</link><description>Recent content in Blogs on Erik McClure</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Erik McClure</copyright><lastBuildDate>Fri, 15 Nov 2024 01:20:00 +0000</lastBuildDate><atom:link href="https://erikmcclure.com/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Stop Making Me Memorize The Borrow Checker</title><link>https://erikmcclure.com/blog/stop-making-me-memorize-borrow-checker/</link><pubDate>Fri, 15 Nov 2024 01:20:00 +0000</pubDate><guid>https://erikmcclure.com/blog/stop-making-me-memorize-borrow-checker/</guid><description>I started learning Rust about 3 or 4 years ago. I am now knee-deep in several very complex Rust projects that keep slamming into the limitations of the Rust compiler. One of the most common and obnoxious problems is hitting a situation the borrow-checker can&amp;rsquo;t deal with and realizing that I need to completely re-architect how my program works, because lifetimes are &amp;ldquo;contagious&amp;rdquo; the same way async is. Naturally, Rust has both!</description></item><item><title>Rust Async Makes Me Want To Gouge My Eyes Out</title><link>https://erikmcclure.com/blog/rust-async-makes-me-want-to-gouge-my-eyes-out/</link><pubDate>Sun, 20 Oct 2024 15:35:00 +0000</pubDate><guid>https://erikmcclure.com/blog/rust-async-makes-me-want-to-gouge-my-eyes-out/</guid><description>One of the most fundamental problems with Rust is the design of Result. It is a lightweight, standardized error return value, similar to C-style error codes but implemented at a type system level that can contain arbitrary information. They are easy to use and very useful, and the ecosystem encourages you to use them over panic! whenever possible. Unfortunately, this ends up creating a problem. Result is not like a C++ exception because it doesn&amp;rsquo;t contain a stacktrace by default, nor does the compiler have any idea where it was first constructed, unless the error type it contains decides to include that information upon construction by using backtrace.</description></item><item><title>Engineers Only Get Paid If Something Is Broken</title><link>https://erikmcclure.com/blog/engineers-only-get-paid-something-broken/</link><pubDate>Sat, 31 Aug 2024 15:35:00 +0000</pubDate><guid>https://erikmcclure.com/blog/engineers-only-get-paid-something-broken/</guid><description>*shaking voice*
&amp;quot;so, here&amp;#39;s the thing â€” you&amp;#39;re not gonna force all of us to learn rust&amp;quot;
the way this is said... you&amp;#39;d think they were being deported or something. incredibly childish people at the helm there.https://t.co/fcgA6m9fvq
&amp;mdash; fasterthanlime (@fasterthanlime) August 30, 2024 Recently, Rust people have been getting frustrated with C developers who seem to base their entire personal identity on being able to do unsafe memory things. The thing is, this is not a phenomenon unique to C developers, or even software developers in general, although the visibility of the kernel C developers is higher than the average programmer.</description></item><item><title>Measuring Competence Is Epistemic Hell</title><link>https://erikmcclure.com/blog/measuring-competence-is-epistemic-hell/</link><pubDate>Tue, 30 Apr 2024 17:30:00 +0000</pubDate><guid>https://erikmcclure.com/blog/measuring-competence-is-epistemic-hell/</guid><description>Sturgeon&amp;rsquo;s law states that 90% of everything is crap. Combined with Hanlon&amp;rsquo;s Razor, we arrive at the inescapable conclusion that most problems are caused by incompetence. What&amp;rsquo;s particularly interesting is that the number of incompetent people in a system tends to increase the higher up you go. Part of this is due to the Peter Principle, where organizations promote employees until they become incompetent, but this happens in the first place because it becomes harder to measure competence&amp;rsquo; the longer it takes the effects of actions to be felt, and as a species we have no way of measuring long-term incompetence.</description></item><item><title>Discord Should Remove Usernames Entirely</title><link>https://erikmcclure.com/blog/discord-should-remove-usernames/</link><pubDate>Fri, 05 May 2023 13:02:00 +0000</pubDate><guid>https://erikmcclure.com/blog/discord-should-remove-usernames/</guid><description>Discord&amp;rsquo;s Recent Announcement made a lot of people mad, mostly because of Hyrum&amp;rsquo;s Law - users were relying on unintended observable behavior in the original username system, and are mad that their use-cases are being broken despite very good evidence that the current system is problematic. I think the major issue here is that Discord didn&amp;rsquo;t go far enough, and as a result, it&amp;rsquo;s confusing users who are unaware of the technical and practical reasons for the username change, or what a username is even for.</description></item><item><title>We Need New Motherboards Before GPUs Collapse Under Their Own Gravity</title><link>https://erikmcclure.com/blog/we-need-new-motherboards/</link><pubDate>Thu, 22 Sep 2022 16:30:00 +0000</pubDate><guid>https://erikmcclure.com/blog/we-need-new-motherboards/</guid><description>You can&amp;rsquo;t have a 4-slot GPU. You just can&amp;rsquo;t.
We have finally left sanity behind, with nvidia&amp;rsquo;s 4000 series cards yielding a &amp;ldquo;clown car&amp;rdquo; of absurd GPU designs, as GamersNexus put it. These cards are so huge they need &amp;ldquo;GPU Support Sticks&amp;rdquo;, which are an actual real thing now. The fact that we insist on relegating the GPU to interfacing with the system while hanging off of a single, increasingly absurd PCIe 6.</description></item><item><title>C++ Constructors, Memory, and Lifetimes</title><link>https://erikmcclure.com/blog/cpp-constructors-memory-and-lifetimes/</link><pubDate>Sat, 01 May 2021 23:04:00 +0000</pubDate><guid>https://erikmcclure.com/blog/cpp-constructors-memory-and-lifetimes/</guid><description>What exactly happens when you write Foo* foo = new Foo();? A lot is packed into this one statement, so lets try to break it down. First, this example is allocating new memory on the heap, but in order to understand everything that&amp;rsquo;s going on, we&amp;rsquo;re going to have to explain what it means to declare a variable on the stack. If you already have a good understanding of how the stack works, and how functions do cleanup before returning, feel free to skip to the new statement.</description></item><item><title>Factorio Is The Best Technical Interview We Have</title><link>https://erikmcclure.com/blog/factorio-is-best-interview-we-have/</link><pubDate>Fri, 12 Mar 2021 15:26:00 +0000</pubDate><guid>https://erikmcclure.com/blog/factorio-is-best-interview-we-have/</guid><description>There&amp;rsquo;s been a lot of hand-wringing over The Technical Interview lately. Many people realize that inverting a binary tree on a whiteboard has basically zero correlation to whether or not someone is actually a good software developer. The most effective programming test anyone&amp;rsquo;s come up with is still Fizzbuzz. One consequence of this has been an increased emphasis on Open Source Contributions, but it turns out these aren&amp;rsquo;t a very good metric either, because most people don&amp;rsquo;t have that kind of time.</description></item><item><title>Why You Can't Use Prebuilt LLVM 10.0 with C++17</title><link>https://erikmcclure.com/blog/why-you-cant-use-prebuilt-llvm-with-cpp17/</link><pubDate>Thu, 09 Jul 2020 02:50:00 +0000</pubDate><guid>https://erikmcclure.com/blog/why-you-cant-use-prebuilt-llvm-with-cpp17/</guid><description>C++17 introduced an alignment argument to ::operator new(). It&amp;rsquo;s important to note that if you allocate something using aligned new, you absolutely must deallocate it using aligned delete, or the behavior is undefined. LLVM 10.x takes advantage of this alignment parameter, if the compiler supports it. That means if you are compiling on Windows with MSVC set to C++14, __cpp_aligned_new is not defined and the extra argument isn&amp;rsquo;t passed. Otherwise, if it&amp;rsquo;s compiled with MSVC set to C++17, __cpp_aligned_new is defined and the extra argument is passed.</description></item><item><title>Pressure Based Anti-Spam for Discord Bots</title><link>https://erikmcclure.com/blog/pressure-based-anti-spam-for-discord-bots/</link><pubDate>Wed, 15 Jan 2020 21:45:00 +0000</pubDate><guid>https://erikmcclure.com/blog/pressure-based-anti-spam-for-discord-bots/</guid><description>Back when Discord was a wee little chat platform with no rate limiting whatsoever, it&amp;rsquo;s API had already been reverse-engineered by a bunch of bot developers who then went around spamming random servers with so many messages it would crash the client. My friends and I were determined to keep our discord server public, so I went about creating the first anti-spam bot for Discord.
I am no longer maintaining this bot beyond simple bugfixes because I have better things to do with my time, and I&amp;rsquo;m tired of people trying to use it because &amp;ldquo;it&amp;rsquo;s the best anti-spam bot&amp;rdquo; even after I deprecated it.</description></item><item><title>Name Shadowing Should Be An Operator</title><link>https://erikmcclure.com/blog/name-shadowing-should-be-an-operator/</link><pubDate>Sun, 13 Oct 2019 13:23:58 -0700</pubDate><guid>https://erikmcclure.com/blog/name-shadowing-should-be-an-operator/</guid><description>I recently discovered that in Rust, this is a relatively common operation: let foo = String::from(&amp;#34;foo&amp;#34;); // stuff that needs ownership let foo = &amp;amp;foo; Or this: let mut vec = Vec::new(); vec.push(&amp;#34;a&amp;#34;); vec.push(&amp;#34;b&amp;#34;); let vec = vec; /* vec is immutable now */ This is a particularly permissive form of name-shadowing, which allows you to re-declare a variable in an inner scope that shadows the name of a variable in an outer scope, making the outer variable inaccessible.</description></item><item><title>A Rant On Terra</title><link>https://erikmcclure.com/blog/a-rant-on-terra/</link><pubDate>Fri, 04 Oct 2019 17:08:00 +0000</pubDate><guid>https://erikmcclure.com/blog/a-rant-on-terra/</guid><description>Metaprogramming, or the ability to inspect, modify and generate code at compile-time (as opposed to reflection, which is runtime introspection of code), has slowly been gaining momentum. Programmers are finally admitting that, after accidentally inventing turing complete template systems, maybe we should just have proper first-class support for generating code. Rust has macros, Zig has built-in compile time expressions, Nim lets you rewrite the AST however you please, and dependent types have been cropping up all over the place.</description></item><item><title>RISC Is Fundamentally Unscalable</title><link>https://erikmcclure.com/blog/risc-is-fundamentally-unscalable/</link><pubDate>Sat, 27 Jul 2019 20:09:00 +0000</pubDate><guid>https://erikmcclure.com/blog/risc-is-fundamentally-unscalable/</guid><description>Today, there was an announcement about a new RISC-V chip, which has got a lot of people excited. I wish I could also be excited, but to me, this is just a reminder that RISC architectures are fundamentally unscalable, and inevitably stop being RISC as soon as they need to be fast. People still call ARM a &amp;ldquo;RISC&amp;rdquo; architecture despite ARMv8.3-A adding a FJCVTZS instruction, which is &amp;ldquo;Floating-point Javascript Convert to Signed fixed-point, rounding toward Zero&amp;rdquo;.</description></item><item><title>Migrating To A Static Blog</title><link>https://erikmcclure.com/blog/migrating-to-static-blog/</link><pubDate>Tue, 06 Feb 2018 09:07:29 +0000</pubDate><guid>https://erikmcclure.com/blog/migrating-to-static-blog/</guid><description>I&amp;rsquo;ve finished constructing a new personal website for myself using hugo, and I&amp;rsquo;m moving my blog over there so I have more control over what gets loaded, and more importantly, so the page doesn&amp;rsquo;t attempt to load Blogger&amp;rsquo;s 5 MB worth of bloated javascript nonsense just to read some text. It also fixes math and code highlighting while reading on mobile. If you reached this post using Blogger, you&amp;rsquo;ll be redirected or will soon be redirected to the corresponding post on my new website.</description></item><item><title>How To Avoid Memorizing Times Tables</title><link>https://erikmcclure.com/blog/how-to-avoid-memorizing-times-tables/</link><pubDate>Mon, 01 Jan 2018 11:37:00 +0000</pubDate><guid>https://erikmcclure.com/blog/how-to-avoid-memorizing-times-tables/</guid><description>I was recently told that my niece was trying to memorize her times tables. As an applied mathematician whose coding involves plenty of multiplication, I was not happy to hear this. Nobody who does math actually memorizes times tables, and furthermore, forcing a child to memorize anything is probably the worst possible thing you can do in modern society. No one should memorize their times tables, they should learn how to calculate them.</description></item><item><title>Integrating LuaJIT and Autogenerating C Bindings In Visual Studio</title><link>https://erikmcclure.com/blog/integrating-luajit-and-autogenerating-c/</link><pubDate>Mon, 24 Jul 2017 23:15:00 +0000</pubDate><guid>https://erikmcclure.com/blog/integrating-luajit-and-autogenerating-c/</guid><description>Lua is a popular scripting language due to its tight integration with C. LuaJIT is an extremely fast JIT compiler for Lua that can be integrated into your game, which also provides an FFI Library that directly interfaces with C functions, eliminating most overhead. However, the FFI library only accepts a subset of the C standard. Specifically, &amp;ldquo;C declarations are not passed through a C pre-processor, yet. No pre-processor tokens are allowed, except for #pragma pack.</description></item><item><title>Discord: Rise Of The Bot Wars</title><link>https://erikmcclure.com/blog/discord-rise-of-bot-wars/</link><pubDate>Sat, 24 Jun 2017 08:40:00 +0000</pubDate><guid>https://erikmcclure.com/blog/discord-rise-of-bot-wars/</guid><description>The most surreal experience I ever had on discord was when someone PMed me to complain that my anti-spam bot wasn&amp;rsquo;t working against a 200+ bot raid. I pointed out that it was never designed for large-scale attacks, and that discord&amp;rsquo;s own rate-limiting would likely make it useless. He revealed he was selling spambot accounts at a rate of about $1 for 100 unique accounts and that he was being attacked by a rival spammer.</description></item><item><title>Windows Won't Let My Program Crash</title><link>https://erikmcclure.com/blog/windows-wont-let-my-program-crash/</link><pubDate>Mon, 13 Feb 2017 21:33:00 +0000</pubDate><guid>https://erikmcclure.com/blog/windows-wont-let-my-program-crash/</guid><description>It&amp;rsquo;s been known for a while that windows has a bad habit of eating your exceptions if you&amp;rsquo;re inside a WinProc callback function. This behavior can cause all sorts of mayhem, like your program just vanishing into thin air without any error messages due to a stack overflow that terminated the program without actually throwing an exception. What I didn&amp;rsquo;t realize is that it also eats assert(), which makes debugging hell, because the assertion would throw, the entire user callback would immediately terminate without any stack unwinding, and then windows would just&amp;hellip; keep going, even though the program is now in a laughably corrupt state, because only half the function executed.</description></item><item><title>DirectX Is Terrifying</title><link>https://erikmcclure.com/blog/directx-is-terrifying/</link><pubDate>Wed, 01 Feb 2017 19:35:00 +0000</pubDate><guid>https://erikmcclure.com/blog/directx-is-terrifying/</guid><description>About two months ago, I got a new laptop and proceeded to load all my projects on it. Despite compiling everything fine, my graphics engine that used DirectX mysteriously crashed upon running. I immediately suspected either a configuration issue or a driver issue, but this seemed weird because my laptop had a newer graphics card than my desktop. Why was it crashing on newer hardware? Things got even more bizarre once I narrowed down the issue - it was in my shader assignment code, which hadn&amp;rsquo;t been touched in almost 2 years.</description></item><item><title>Everyone Does sRGB Wrong Because Everyone Else Does sRGB Wrong</title><link>https://erikmcclure.com/blog/everyone-does-srgb-wrong-because/</link><pubDate>Tue, 20 Dec 2016 15:26:00 +0000</pubDate><guid>https://erikmcclure.com/blog/everyone-does-srgb-wrong-because/</guid><description>Did you know that CSS3 does all its linear gradients and color interpolation completely wrong? All color values in CSS3 are in the sRGB color space, because that&amp;rsquo;s the color space that gets displayed on our monitor. However, the problem is that the sRGB color space looks like this:
Trying to do a linear interpolation along a nonlinear curve doesn&amp;rsquo;t work very well. Instead, you&amp;rsquo;re supposed to linearize your color values, transforming the sRGB curve to the linear RGB curve before doing your operation, and then transforming it back into the sRGB curve.</description></item><item><title>Mathematical Notation Is Awful</title><link>https://erikmcclure.com/blog/mathematical-notation-is-awful/</link><pubDate>Sat, 30 Jul 2016 22:18:00 +0000</pubDate><guid>https://erikmcclure.com/blog/mathematical-notation-is-awful/</guid><description>Today, a friend asked me for help figuring out how to calculate the standard deviation over a discrete probability distribution. I pulled up my notes from college and was able to correctly calculate the standard deviation they had been unable to derive after hours upon hours of searching the internet and trying to piece together poor explanations from questionable sources. The crux of the problem was, as I had suspected, the astonishingly bad notation involved with this particular calculation.</description></item><item><title>Using Data To Balance Your Game: Pony Clicker Analysis</title><link>https://erikmcclure.com/blog/using-data-to-balance-your-game-pony/</link><pubDate>Sat, 30 May 2015 10:36:00 +0000</pubDate><guid>https://erikmcclure.com/blog/using-data-to-balance-your-game-pony/</guid><description>*The only thing more addicting than heroine are numbers that keep getting larger.* Incrementer and idle games are seemingly simplistic games where you wait or click to increase a counter, then use that counter to buy things to make the counter go up faster. Because of the compounding effects involved, these types of games inevitably turn into a study of growth rates and how different functions interact. Cookie Clicker is perhaps the most well-known, which employs an exponential growth curve for the costs of buildings that looks like this:</description></item><item><title>Can We Choose What We Enjoy?</title><link>https://erikmcclure.com/blog/can-we-choose-what-we-enjoy/</link><pubDate>Fri, 08 Aug 2014 13:14:00 +0000</pubDate><guid>https://erikmcclure.com/blog/can-we-choose-what-we-enjoy/</guid><description>One of the most bizarre arguments I have ever heard in ethics is whether or not people can choose to be gay or not. The idea is, if being gay is genetically predetermined, it&amp;rsquo;s not their fault, therefore you can&amp;rsquo;t prosecute them for something they have no control over.
Since when did anyone get to choose what makes them happy? Can you choose to like strawberries? Can you choose to enjoy the smell of dandelions?</description></item><item><title>How To Make Your Profiler 10x Faster</title><link>https://erikmcclure.com/blog/how-to-make-your-profiler-10x-faster/</link><pubDate>Sat, 28 Jun 2014 17:31:00 +0000</pubDate><guid>https://erikmcclure.com/blog/how-to-make-your-profiler-10x-faster/</guid><description>Frustrated with C profilers that are either so minimal as to be useless, or giant behemoths that require you to install device drivers, I started writing a lightweight profiler for my utility library. I already had a high precision timer class, so it was just a matter of using a radix trie that didn&amp;rsquo;t blow up the cache. I was very careful about minimizing the impact the profiler had on the code, even going so far as to check if extended precision floating point calculations were slowing it down.</description></item><item><title>The Problem With Photorealism</title><link>https://erikmcclure.com/blog/the-problem-with-photorealism/</link><pubDate>Tue, 18 Mar 2014 09:05:00 +0000</pubDate><guid>https://erikmcclure.com/blog/the-problem-with-photorealism/</guid><description>Many people assume that modern graphics technology is now capable of rendering photorealistic video games. If you define photorealistic as any still frame is indistinguishable from a real photo, then we can get pretty close. Unfortunately, the problem with video games is that they are not still frames - they move.
What people don&amp;rsquo;t realize is that modern games rely on faking a lot of stuff, and that means they only look photorealistic in a very tight set of circumstances.</description></item><item><title>Google's Decline Really Bugs Me</title><link>https://erikmcclure.com/blog/googles-decline-really-bugs-me/</link><pubDate>Sun, 17 Nov 2013 11:13:00 +0000</pubDate><guid>https://erikmcclure.com/blog/googles-decline-really-bugs-me/</guid><description>Google is going down the drain.
That isn&amp;rsquo;t to say they aren&amp;rsquo;t fantastically successful. They are. I still use their products, mostly because I don&amp;rsquo;t put things on the internet I don&amp;rsquo;t want other people to find, and I&amp;rsquo;m not female, so I don&amp;rsquo;t have to worry about misogynists stalking me. They still make stupendous amounts of money and pump out some genuinely good software. They still have the best search engine.</description></item><item><title>Write Less Code</title><link>https://erikmcclure.com/blog/write-less-code/</link><pubDate>Thu, 12 Sep 2013 10:36:00 +0000</pubDate><guid>https://erikmcclure.com/blog/write-less-code/</guid><description>*"Everything should be as simple as possible, but not simpler."* - Albert Einstein ([paraphrased](http://quoteinvestigator.com/2011/05/13/einstein-simple/#more-2363)) The burgeoning complexity of software is perhaps one of the most persistent problems plaguing computer science. We have tried many, many ways of managing this complexity: inventing new languages, creating management systems, and enforcing coding styles. They have all proven to be nothing more than stopgaps. With the revelation that the NSA is utilizing the inherent complexity of software systems to sabotage our efforts at securing our systems, this problem has become even more urgent.</description></item><item><title>Leap Motion Impressions, Input Sanitation, and 3D Gesture Ideas</title><link>https://erikmcclure.com/blog/leap-motion-impressions-input/</link><pubDate>Tue, 23 Jul 2013 17:05:00 +0000</pubDate><guid>https://erikmcclure.com/blog/leap-motion-impressions-input/</guid><description>**Pros:** For the most part, does what it claims it does, and gives you extremely precise, fast tracking of fingers. Cons:
Really hates thumbs for some reason. Has a lot of trouble with pens or other implements. Fingers must be separated. Fairly easy to get positions that break the camera because it can&amp;rsquo;t see the fingers. No one has any idea how to write software for it. I just got my Leap Motion device today, and for the most part, I like it.</description></item><item><title>Aurora Theory Released!</title><link>https://erikmcclure.com/blog/aurora-theory-released/</link><pubDate>Thu, 11 Jul 2013 19:27:00 +0000</pubDate><guid>https://erikmcclure.com/blog/aurora-theory-released/</guid><description>Aurora Theory has been released! Buy it on bandcamp for $9, or $10 on iTunes, Amazon, and Google Play. The album is also available on Spotify, last.fm, other online radios, and can be previewed on YouTube.
Aurora Theory has been 4 years in the making, a compilation of all the songs I managed to make in the middle of attending university. The earlier songs have been extensively improved, and all songs have been remastered for the album&amp;rsquo;s release.</description></item><item><title>What I Learned In College</title><link>https://erikmcclure.com/blog/what-i-learned-in-college/</link><pubDate>Thu, 13 Jun 2013 07:56:00 +0000</pubDate><guid>https://erikmcclure.com/blog/what-i-learned-in-college/</guid><description>*"In times of change, learners inherit the earth, while the learned find themselves beautifully equipped to deal with a world that no longer exists."* â€• Eric Hoffer Yesterday, the University of Washington finally mailed me my diploma. A Bachelor of Science in Applied Computational Math and Science: Discrete Math and Algorithms. I learned a lot of things in college. I learned how to take tests and how to pinpoint exactly what useless crap a particular final needed me to memorize.</description></item><item><title>Course Notes</title><link>https://erikmcclure.com/blog/course-notes/</link><pubDate>Sat, 25 May 2013 18:39:00 +0000</pubDate><guid>https://erikmcclure.com/blog/course-notes/</guid><description>It's standard procedure at the University of Washington to allow a single sheet of handwritten notes during a Mathematics exam. I started collecting these sheets after I realized how useful it was to have a reference that basically summarized all the useful parts of the course on a single sheet of paper. Now that I've graduated, it's easy for me to quickly forget all the things I'm not using. The problem is that, when I need to say, develop an algorithm for simulating turbulent airflow, I need to go back and re-learn vector calculus, differential equations and nonlinear dynamics.</description></item><item><title>Windows Breaks assert() Inside WM_CANCELMODE</title><link>https://erikmcclure.com/blog/windows-breaks-assert-inside/</link><pubDate>Thu, 07 Feb 2013 20:17:00 +0000</pubDate><guid>https://erikmcclure.com/blog/windows-breaks-assert-inside/</guid><description>So I have this dll that&amp;rsquo;s doing a bunch of horrible WinAPI calls for me. It&amp;rsquo;s designed to abstract away all the pain and unholy functions feeding on innocent blood. Little did I know that trying to cage WinAPI into a more manageable corner would be my undoing.
The window is created and assigned a WndProc callback function inside this DLL, as per the various absurd requirements involving how you create windows in Windows.</description></item><item><title>The Productivity Fallacy</title><link>https://erikmcclure.com/blog/the-productivity-fallacy/</link><pubDate>Fri, 18 Jan 2013 17:12:00 +0000</pubDate><guid>https://erikmcclure.com/blog/the-productivity-fallacy/</guid><description>Technology tends to serve one of two purposes - to make us more efficient at some task, or to entertain us in our resulting free time. However, when we fixate on productivity to the exclusion of everything else, we often forget about the big picture. Perhaps the best example of this are people insisting that real coders need to use Vim to be productive due to it&amp;rsquo;s unmatched text editing powers.</description></item><item><title>C# to C++ Tutorial - Part 4: Operator Overload</title><link>https://erikmcclure.com/blog/c-to-c-tutorial-part-4-operator-overload/</link><pubDate>Sat, 20 Oct 2012 11:16:00 +0000</pubDate><guid>https://erikmcclure.com/blog/c-to-c-tutorial-part-4-operator-overload/</guid><description>[ 1 Â· 2 Â· 3 Â· 4 Â· 5 Â· 6 Â· 7 ]
If you are familiar with C#, you should be familiar with the difference between C#&amp;rsquo;s struct and class declarations. Namely, a struct is a value type and a class is a reference type, meaning that if you pass a struct to a function, its default behavior is for the entire struct to be copied into the function&amp;rsquo;s parameter, so any modifications made to it won&amp;rsquo;t affect whatever was passed in.</description></item><item><title>7 Problems Raytracing Doesn't Solve</title><link>https://erikmcclure.com/blog/7-problems-raytracing-doesnt-solve/</link><pubDate>Thu, 27 Sep 2012 04:13:00 +0000</pubDate><guid>https://erikmcclure.com/blog/7-problems-raytracing-doesnt-solve/</guid><description>I see a lot of people get excited about extreme concurrency in modern hardware bringing us closer to the magical holy grail of raytracing. It seems that everyone thinks that once we have raytracing, we can fully simulate entire digital worlds, everything will be photorealistic, and graphics will become a &amp;ldquo;solved problem&amp;rdquo;. This simply isn&amp;rsquo;t true, and in fact highlights several fundamental misconceptions about the problems faced by modern games and other interactive media.</description></item><item><title>Analyzing XKCD: Click and Drag</title><link>https://erikmcclure.com/blog/analyzing-xkcd-click-and-drag/</link><pubDate>Wed, 19 Sep 2012 07:33:00 +0000</pubDate><guid>https://erikmcclure.com/blog/analyzing-xkcd-click-and-drag/</guid><description>Today, xkcd featured a comic with a comically large image that is navigated by clicking and dragging. In the interests of SCIENCE (and possibly accidentally DDoSing Randall&amp;rsquo;s image server - sorry!), I created a static HTML file of the entire composite image.1
The collage is made up of 225 images2 that stretch out over a total image area 79872 pixels high and 165888 pixels wide. The images take up 5.52 MB of space and are named with a simple naming scheme &amp;#34;ydxd.</description></item><item><title>Coordinate Systems And Cascading Stupidity</title><link>https://erikmcclure.com/blog/coordinate-systems-and-cascading/</link><pubDate>Wed, 25 Jul 2012 01:06:00 +0000</pubDate><guid>https://erikmcclure.com/blog/coordinate-systems-and-cascading/</guid><description>Today I learned that there are way too many coordinate systems, and that I&amp;rsquo;m an idiot (but that was already well-established). I have also learned to not trust graphics tutorials, but the reasons for that won&amp;rsquo;t become apparent until the end of this article.
There are two types of coordinate systems: left-handed and right-handed coordinate systems. By convention, most everyone in math and science uses right-handed coordinate systems with positive x going to the right, positive y going up, and positive z coming out of the screen.</description></item><item><title>How Joysticks Ruined My Graphics Engine</title><link>https://erikmcclure.com/blog/how-joysticks-ruined-my-graphics-engine/</link><pubDate>Fri, 22 Jun 2012 22:29:00 +0000</pubDate><guid>https://erikmcclure.com/blog/how-joysticks-ruined-my-graphics-engine/</guid><description>It&amp;rsquo;s almost a tradition.
Every time my graphics engine has been stuck in maintenence mode for 6 months, I&amp;rsquo;ll suddenly realize I need to push out an update or implement some new feature. I then realize that I haven&amp;rsquo;t actually paid attention to any of my testing programs, or their speed, in months. This is followed by panic, as I discover my engine running at half speed, or worse. Having made an infinite number of tiny tweaks that all could have caused the problem, I am often thrown into temporary despair only to almost immediately find some incredibly stupid mistake that was causing it.</description></item><item><title>Multithreading Problems In Game Design</title><link>https://erikmcclure.com/blog/multithreading-problems-in-game-design/</link><pubDate>Wed, 23 May 2012 23:46:00 +0000</pubDate><guid>https://erikmcclure.com/blog/multithreading-problems-in-game-design/</guid><description>A couple years ago, when I first started designing a game engine to unify Box2D and my graphics engine, I thought this was a superb opportunity to join all the cool kids and multithread it. I mean all the other game developers were talking about having a thread for graphics, a thread for physics, a thread for audio, etc. etc. etc. So I spent a lot of time teaching myself various lockless threading techniques and building quite a few iterations of various multithreading structures.</description></item><item><title>Why Windows 8 Does The Right Thing The Wrong Way</title><link>https://erikmcclure.com/blog/why-windows-8-does-right-thing-wrong/</link><pubDate>Wed, 14 Mar 2012 14:28:00 +0000</pubDate><guid>https://erikmcclure.com/blog/why-windows-8-does-right-thing-wrong/</guid><description>Yesterday, I saw a superb presentation called &amp;ldquo;When The Consoles Die, What Comes Next?&amp;rdquo; by Ben Cousins. It demonstrates that mobile gaming is behaving as a disruptive technology, and is causing the same market decline in consoles that consoles themselves did to arcades in the 1990s. He also demonstrates how TV crushed cinema in a similar manner - we just don&amp;rsquo;t think of it like that because we don&amp;rsquo;t remember back when almost 60% of the population was going to the movie theaters on a weekly basis.</description></item><item><title>Visual Studio Broke My Computer</title><link>https://erikmcclure.com/blog/visual-studio-broke-my-computer/</link><pubDate>Sat, 10 Mar 2012 16:22:00 +0000</pubDate><guid>https://erikmcclure.com/blog/visual-studio-broke-my-computer/</guid><description>So I&amp;rsquo;d been using the developer preview of VS11 and liked some of its improvements. When the desaturated VS11 beta came out, I hated the color scheme but decided I still wanted the upgraded components, so I went to install VS11 beta. Unfortunately the beta only lets you change its install location if the preview developer preview isn&amp;rsquo;t installed, and the developer preview had installed itself into C:\ without ever letting me change the path, which was annoying.</description></item><item><title>Implicit UI Design</title><link>https://erikmcclure.com/blog/implicit-ui-design/</link><pubDate>Fri, 24 Feb 2012 10:18:00 +0000</pubDate><guid>https://erikmcclure.com/blog/implicit-ui-design/</guid><description>For a long time, I have been frustrated with the poor UI design that is rampant in the software industry. As a consequence, many Linux enthusiasts have pointed out how productive you can be with Emacs, VIM, and other keyboard-shortcut/terminal oriented software. The UI design has gotten so bad, I have to agree that in comparison to recent user interface designs, keyboard shortcuts are looking rather appealing. This, however, doesn&amp;rsquo;t mean that one approach is inherently better than another, simply that modern user interfaces suck.</description></item><item><title>Linux Mint 12 KDE</title><link>https://erikmcclure.com/blog/linux-mint-12-kde/</link><pubDate>Sun, 19 Feb 2012 10:32:00 +0000</pubDate><guid>https://erikmcclure.com/blog/linux-mint-12-kde/</guid><description>Over the course of 3 hours spent trying to figure out why my Linux Mint 12 KDE installation would to go to a permanent black screen on boot, I managed to overheat part of my computer (at least that is the only thing that could explain this) to the point where it&amp;rsquo;d lock up on the POST and had to give up until this morning, where I managed to figure out that I could delete the xorg.</description></item><item><title>'Programmer' is an Overgeneralization</title><link>https://erikmcclure.com/blog/new-post/</link><pubDate>Sun, 05 Feb 2012 20:59:00 +0000</pubDate><guid>https://erikmcclure.com/blog/new-post/</guid><description>*"Beware of bugs in the above code; I have only proved it correct, not tried it."* - Donald Knuth Earlier today, I came across a post during a google-fu session that claimed that no one should use the C++ standard library function make_heap, because almost nobody uses it correctly. I immediately started mentally ranting about how utterly ridiculous this claim is, because anyone whose gone to a basic algorithm class would know how to properly use make_heap.</description></item><item><title>The Great Mystery of Linear Gradient Lighting</title><link>https://erikmcclure.com/blog/great-mystery-of-linear-gradient/</link><pubDate>Thu, 01 Dec 2011 13:36:00 +0000</pubDate><guid>https://erikmcclure.com/blog/great-mystery-of-linear-gradient/</guid><description>A long, long time ago, in pretty much the same place I&amp;rsquo;m sitting in right now, I was learning how one would do 2D lighting with soft shadows and discovered the age old adage in 2D graphics: linear gradient lighting looks better than mathematically correct inverse square lighting.
Strange.
I brushed it off as artistic license and perceptual trickery, but over the years, as I dug into advanced lighting concepts, nothing could explain this.</description></item><item><title>Signed Integers Considered Stupid (Like This Title)</title><link>https://erikmcclure.com/blog/signed-integers-considered-stupid-like/</link><pubDate>Thu, 24 Nov 2011 16:02:00 +0000</pubDate><guid>https://erikmcclure.com/blog/signed-integers-considered-stupid-like/</guid><description>Unrelated note: If you title your article &amp;ldquo;[x] considered harmful&amp;rdquo;, you are a horrible person with no originality. Stop doing it.
Signed integers have always bugged me. I&amp;rsquo;ve seen quite a bit of signed integer overuse in C#, but it is most egregious when dealing with C/C++ libraries that, for some reason, insist on using for(int i = 0; i &amp;lt; 5; ++i). Why would you ever write that? i cannot possibly be negative and for that matter shouldn&amp;rsquo;t be negative, ever.</description></item><item><title>C# to C++ Tutorial - Part 3: Classes and Structs and Inheritance (OH MY!)</title><link>https://erikmcclure.com/blog/c-to-c-tutorial-part-3-classes-and/</link><pubDate>Fri, 09 Sep 2011 18:07:00 +0000</pubDate><guid>https://erikmcclure.com/blog/c-to-c-tutorial-part-3-classes-and/</guid><description>[ 1 Â· 2 Â· 3 Â· 4 &amp;middot; 5 &amp;middot; 6 &amp;middot; 7 ]
Classes in C#, like most object-oriented languages, are very similar to their C++ counterparts. They are declared with class, exist between brackets and inherit classes using a colon &amp;#39;:&amp;#39;. Note, however, that all classes in C++ must end with a semicolon! You will forget this semicolon, and then all the things will break. You can do pretty much everything you can do with a C# class in a C++ class, except that C++ does not have partial classes, and in C++ classes themselves cannot be declared public, protected or private.</description></item><item><title>The Problem of Vsync</title><link>https://erikmcclure.com/blog/problem-of-vsync/</link><pubDate>Mon, 05 Sep 2011 04:43:00 +0000</pubDate><guid>https://erikmcclure.com/blog/problem-of-vsync/</guid><description>If you were to write directly to the screen when drawing a bouncing circle, you would run into some problems. Because you don&amp;rsquo;t do any buffering, your user might end up with a quarter circle drawn for a frame. This can be solved through Double Buffering, which means you draw the circle on to a backbuffer, then &amp;ldquo;flip&amp;rdquo; (or copy) the completed image on to the screen. This means you will only ever send a completely drawn scene to the monitor, but you will still have tearing issues.</description></item><item><title>C# to C++ Tutorial - Part 2: Pointers Everywhere!</title><link>https://erikmcclure.com/blog/c-to-c-tutorial-part-2-pointers/</link><pubDate>Thu, 21 Jul 2011 19:35:00 +0000</pubDate><guid>https://erikmcclure.com/blog/c-to-c-tutorial-part-2-pointers/</guid><description>[ 1 Â· 2 Â· 3 Â· 4 Â· 5 Â· 6 Â· 7 ]
We still have a lot of ground to cover on pointers, but before we do, we need to address certain conceptual frameworks missing from C# that one must be intimately familiar with when moving to C++.
Specifically, in C# you mostly work with the Heap. The heap is not difficult to understand - its a giant lump of memory that you take chunks out of to allocate space for your classes.</description></item><item><title>C# to C++ Tutorial - Part 1: Basics of Syntax</title><link>https://erikmcclure.com/blog/c-to-c-tutorial-part-1-basics-of-syntax/</link><pubDate>Wed, 06 Jul 2011 04:26:00 +0000</pubDate><guid>https://erikmcclure.com/blog/c-to-c-tutorial-part-1-basics-of-syntax/</guid><description>[ 1 Â· 2 Â· 3 Â· 4 Â· 5 Â· 6 Â· 7 ]
When moving from C# to C++, one must have a very deep knowledge of what C# is actually doing when you run your program. Doing so allows you to recognize the close parallels between both languages, and why and how they are different. This tutorial will assume you have a fairly strong grasp of C#, but may not be familiar with some of its more arcane attributes.</description></item><item><title>The Ninth Circle of Bugs</title><link>https://erikmcclure.com/blog/ninth-circle-of-bugs/</link><pubDate>Sun, 15 May 2011 04:43:00 +0000</pubDate><guid>https://erikmcclure.com/blog/ninth-circle-of-bugs/</guid><description>So I&amp;rsquo;m rewriting my 2D culling kd-tree for my graphics engine, and a strange bug pops up. On release mode, one of the images vanished. Since it didn&amp;rsquo;t happen in debug mode, it was already a heisenbug. A heisenbug is defined as a bug that vanishes when you try to find it. It took me almost a day to trace the bug to the rebalance function. At first I thought the image had simply been removed from a node accidentally, but this wasn&amp;rsquo;t the case.</description></item><item><title>Investigating Low-level CPU Performance</title><link>https://erikmcclure.com/blog/investigating-low-level-cpu-performance/</link><pubDate>Sun, 10 Apr 2011 17:06:00 +0000</pubDate><guid>https://erikmcclure.com/blog/investigating-low-level-cpu-performance/</guid><description>While reconstructing my threaded Red-Black tree data structure, I naturally assumed that due to invalid branch predictions costing significant amounts of performance, by eliminating branching in low-level data structures, one can significant enhance the performance of your application. I did some profiling and was stunned to discover that my new, optimized Red Black tree was&amp;hellip; SLOWER then the old one! This can&amp;rsquo;t be right, I eliminated several branches and streamlined the whole thing, how can it be SLOWER?</description></item><item><title>Album For Sale! [Renascent]</title><link>https://erikmcclure.com/blog/album-for-sale-renascent/</link><pubDate>Mon, 13 Sep 2010 01:21:00 +0000</pubDate><guid>https://erikmcclure.com/blog/album-for-sale-renascent/</guid><description>Due to Bandcamp&amp;rsquo;s sudden threat to turn all of my free downloads into paid ones, I decided to go ahead and start selling my music properly. Renascent is now available for $3, or about as much as a gallon of milk costs. It contains remastered, super high quality (lossless if you choose to download in FLAC format) versions of all 14 songs, in addition to the original FLP project files used to create them.</description></item><item><title>WavSaver</title><link>https://erikmcclure.com/blog/wavsaver/</link><pubDate>Wed, 25 Aug 2010 19:37:00 +0000</pubDate><guid>https://erikmcclure.com/blog/wavsaver/</guid><description>There is a documented bug in windows 7 that has pissed me off a few times and recently crippled a friend of mine, where a .wav file with corrupted metadata causes explorer.exe to go into an infinite loop. My friend has a large collection of wavs that somehow got corrupted, so I wrote this program to strip them of all metadata. Due to the nature of the bug, the program can&amp;rsquo;t delete them (you must use the command prompt to do that), but rather creates a folder called &amp;ldquo;safe&amp;rdquo; with all the stripped wav files inside of it.</description></item><item><title>Pixel Perfect Hit Testing</title><link>https://erikmcclure.com/blog/pixel-perfect-hit-testing/</link><pubDate>Tue, 17 Aug 2010 06:27:00 +0000</pubDate><guid>https://erikmcclure.com/blog/pixel-perfect-hit-testing/</guid><description>After beating World of Goo after stabilizing things in my game and renaming it, I wondered how easy it was to decompile C# applications and simultaneously thought this would be a great opportunity to get pixel perfect hit testing to work on my engine. So, I decompiled GearGOD&amp;rsquo;s composition example and quickly discovered that his method of detecting mouse messages was&amp;hellip; well something completely different then his extremely bad attempt at explaining it to me had suggested.</description></item><item><title>8-bit color cycling</title><link>https://erikmcclure.com/blog/8-bit-color-cycling/</link><pubDate>Tue, 10 Aug 2010 07:58:00 +0000</pubDate><guid>https://erikmcclure.com/blog/8-bit-color-cycling/</guid><description>Someone linked me to this awesome webpage that uses HTML5 to do 8-bit palette color cycling using Mark Ferrari&amp;rsquo;s technique and art. I immediately wanted to implement it in my graphics engine, but soon realized that the technique is so damn old that no modern graphics card supports it anymore. So, I have come up with a pixel shader that creates the same functionality, either by having one image with an alpha channel containing the palette indices and a separate texture acting as the palette, or you can combine them into a single image.</description></item><item><title>Physics Networking</title><link>https://erikmcclure.com/blog/physics-networking/</link><pubDate>Fri, 06 Aug 2010 04:18:00 +0000</pubDate><guid>https://erikmcclure.com/blog/physics-networking/</guid><description>I&amp;rsquo;m still working on integrating physics into my game, but at some point here I am going to hit on that one major hurdle: syncing one physics environment with another that could be halfway across the globe. There are a number of ways to do this; some of them are bad, and some of them are absolutely terrible.
If any of you have played Transformice, you will know what I mean by terrible.</description></item><item><title>Assembly CAS implementation</title><link>https://erikmcclure.com/blog/assembly-cas-implementation/</link><pubDate>Thu, 22 Jul 2010 12:08:00 +0000</pubDate><guid>https://erikmcclure.com/blog/assembly-cas-implementation/</guid><description>inline unsigned char BSS_FASTCALL asmcas(int *pval, int newval, int oldval) { unsigned char rval; __asm { #ifdef BSS_NO_FASTCALL //if we are using fastcall we don&amp;#39;t need these instructions mov EDX, newval mov ECX, pval #endif mov EAX, oldval lock cmpxchg [ECX], EDX sete rval // Note that sete sets a &amp;#39;byte&amp;#39; not the word } return rval; } This was an absolute bitch to get working in VC++, so maybe this will be useful to someone, somewhere, somehow.</description></item><item><title>Function Pointer Speed</title><link>https://erikmcclure.com/blog/function-pointer-speed/</link><pubDate>Tue, 13 Jul 2010 22:24:00 +0000</pubDate><guid>https://erikmcclure.com/blog/function-pointer-speed/</guid><description>So after a lot of misguided profiling where I ended up just testing the stupid CPU cache and its ability to fucking predict what my code is going to do, I have, for the most part, demonstrated the following:
if(!(rand()%2d)) footest.nothing(); else footest.nothing2(); is slightly faster then
(footest.*funcptr[rand()%2])(); where funcptr is an array of the possible function calls. I had suspected this after I looked at the assembly, and a basic function pointer call like that takes around 11 instructions whereas a normal function call takes a single instruction.</description></item><item><title>Most Bizarre Error Ever</title><link>https://erikmcclure.com/blog/most-bizarre-error-ever/</link><pubDate>Sat, 08 May 2010 00:48:00 +0000</pubDate><guid>https://erikmcclure.com/blog/most-bizarre-error-ever/</guid><description>Ok probably not the most bizarre error ever but it&amp;rsquo;s definitely the weirdest for me.
My graphics engine has a Debug, a Release, and a special Release STD version that&amp;rsquo;s compatible with CLI function requirements and other dependencies. These are organized as 3 separate configurations in my solution for compiling. Pretty normal stuff.
My example applications are all set to be dependent on the graphics engine project, which means visual studio automatically compiles the proper lib file into the project.</description></item><item><title>Physics-oriented Network Interpolation</title><link>https://erikmcclure.com/blog/physics-oriented-network-interpolation/</link><pubDate>Tue, 10 Nov 2009 11:04:00 +0000</pubDate><guid>https://erikmcclure.com/blog/physics-oriented-network-interpolation/</guid><description>Syncing a game over a client server connection is not an easy task. It&amp;rsquo;s actually extraordinarily difficult and is almost completely reliant on the quality of interpolation. Due to the nature of interpolation, it gets exponentially more inaccurate the more time is spent doing it. Therefore, a game designer should want to minimize the amount needed. This is not an easy task, but it usually involves using the server as a middleman to halve the interpolation time.</description></item></channel></rss>