id = "2867827262814216771"
date = 2012-02-25T02:23:14Z
updated = 2012-02-25T02:23:14Z
title = "It&#39;s funny how your second example, with the d..."
content = '''It&#39;s funny how your second example, with the docking panels, shows the flip side of implicit design - sometimes the user does not think the way you think he does. <br /><br />I guess the rationale behind the &#39;pin all panels&#39; action was that if a user is docking windows into panels, this is probably the start of some sort of task and he/she is preparing his/her UI for it - meaning they&#39;ll want to dock multiple panels in all probability. <br />Turns out this isn&#39;t necessarily true.<br /><br />While implicit UI design has some advantages, it also comes with disadvantages, and quite dangerous ones.<br /><br />- While an action that requires you to click three times is more cumbersome than an action that requires you to hover and click once, there are two steps in this process hidden from the user. The designer assumes that the user knows what these two steps were, because they fit into the logical thinking process behind that step.<br />However, when the user _doesn&#39;t_ know the interface stops making sense to them. Your application becomes less transparent to the user, harder to figure out at first, because it does not show the steps it is performing based on an action.<br /><br />- By letting the application decide what the users want to do, you sacrifice flexibility. <br />To take even a solid example such as the tooltip dragging: What if I bring up the tooltip on var1, then the tooltip overlays my declaration of var2, for which I&#39;ve forgotten the exact name? I&#39;d be tempted to drag the tooltip around so I could see what was underneath, yet this would end up pinning it.<br />The danger here is constraining a users workflow or habits to fit your own ideals, and it can easily happen if you take the UI intelligence too far. What if the application starts deciding whether you want to cut or copy a bit of code based on the code you have selected? After all, since code duplication is bad, you&#39;d never want to copy an entire function in the same document right? A decision that makes perfect sense from a development point of view, but one that you&#39;ll agree not many users will be happy about.<br />This is a paradigm in the field I originally come from, industrial product design.<br />If you take something as simple as a chair and start compiling a list of requirements for it, it&#39;s easy to assume that it just needs to be able to bear the users weight on the seat, and that it shouldn&#39;t fall over. But ask yourself - have you ever standing-sat casually on the armrest of a chair when having a conversation? Have you ever tipped your chair backwards to stand on two legs while sitting on it?<br />These are not functions that a chair is designed for, but users do perform them quite often.<br /><br />- Don&#39;t underestimate the psychological value of a click, especially for UI design aimed on non-techies. It is a conscious action that one commits to when one is sure that they want to perform the action it will trigger. This creates a sense of security in using an interface because the user knows that nothing will happen as long as they don&#39;t click on stuff where they don&#39;t know what it does.<br />If we take your example of all kinds of windows opening and closing when you move the mouse over their tabs - that is going to be scary for a typical user. They&#39;re just moving the mouse around, and all of a sudden they changed browser tabs. Does Undo work? No. Darn. What happened?<br />Activating elements in a UI based on hovering is akin to building a physical keyboard that starts typing when you put your fingers over the keys - it isn&#39;t all that practical in most cases.<br />Reason number one being that, in order to prevent chaos on a simple mouse move, you&#39;d want a hover delay on most actions. After this delay is added, a simple mouse click would probably have been faster anyway.<br />--<br /><br />The problems you cited can really be solved using any type of UI design philosophy, as long as you stick to one rule:<br />- Know your user, and design for _them_, not who you think they should be.'''
[author]
	name = "TSchipper"
	uri = "https://www.blogger.com/profile/01461683677703187763"
[author.image]
	source = "//lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35"
	width = "35"
	height = "35"
