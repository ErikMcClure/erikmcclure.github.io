id = "4541202557533023376"
date = 2012-11-26T19:21:26Z
updated = 2012-11-26T19:21:26Z
title = "Interesting post!Since we&#39;re &quot;eliminati..."
content = '''Interesting post!<br /><br />Since we&#39;re &quot;eliminating garbage collection&quot;, I&#39;d like to point out that this is very much so like reference counting garbage collection.  The difference is that we&#39;re taking for granted the immutability of objects.  This is great, and definitely a step towards parallelism / efficient garbage collection.<br /><br />However, the dynamically allocated objects that we do have are the &quot;lattice&quot; itself (really it&#39;s a semi-lattice that doesn&#39;t rely on idempotence, therefore not a very interesting lattice).  These delayed computations are like &quot;thunks&quot; in lazy functional programming, and store enough information to compute their value when demanded.<br /><br />So, this is very similar to reference counting, except on thunks instead of data, where they get evaluated instead of deallocated.  Cool!  The trouble is, when do you actually free the computed data?  Once again when the count of dependent computations falls to 0.<br /><br />There will never be avoidance of dynamic allocation, due to control flow.  Without control flow, the program execution would be statically known.  This /almost/ seems to be how the lattices guy is viewing the world, except he mentions the compiler approximating the memory usage in terms of &quot;input size&quot;, whatever that means.<br /><br />So, the real question is at which level of &quot;batch&quot; can we pre-meditatively allocate a large block of memory involved in a computation, such that we know that we&#39;ll be able to de-allocate the whole thing when we&#39;re done.  Can we make a compiler / runtime system that&#39;s clever enough to analyze the input and anticipate a max-bound on the allocation?  Moreover, could this compiler / runtime system be clever enough to know when this optimization is worth it?'''
[author]
	name = "mgsloan"
	uri = "https://www.blogger.com/profile/07658332964455477237"
[author.image]
	source = "//lh3.googleusercontent.com/zFdxGE77vvD2w5xHy6jkVuElKv-U9_9qLkRYK8OnbDeJPtjSZ82UPq5w6hJ-SA=s35"
	width = "35"
	height = "35"
